/**
 * @packageDocumentation
 * @module api.functional.only
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher, Primitive } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

import type { TryCatch } from "./../../../controllers/AppController";

/**
 * @controller AppController.OnlyOneErrorObject()
 * @path GET /only
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function OnlyOneErrorObject
    (
        connection: IConnection
    ): Promise<OnlyOneErrorObject.Output>
{
    return Fetcher.fetch
    (
        connection,
        OnlyOneErrorObject.ENCRYPTED,
        OnlyOneErrorObject.METHOD,
        OnlyOneErrorObject.path()
    );
}
export namespace OnlyOneErrorObject
{
    export type Output = Primitive<TryCatch<100, { readonly result: false; readonly code: 4000; readonly data: "Error happens something1."; }>>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/only";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/only`;
    }
}