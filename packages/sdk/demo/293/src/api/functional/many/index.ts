/**
 * @packageDocumentation
 * @module api.functional.many
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher, Primitive } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

import type { TryCatch } from "./../../../controllers/AppController";

/**
 * @controller AppController.ManyErrorObjects()
 * @path GET /many
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function ManyErrorObjects
    (
        connection: IConnection
    ): Promise<ManyErrorObjects.Output>
{
    return Fetcher.fetch
    (
        connection,
        ManyErrorObjects.ENCRYPTED,
        ManyErrorObjects.METHOD,
        ManyErrorObjects.path()
    );
}
export namespace ManyErrorObjects
{
    export type Output = Primitive<TryCatch<100, { readonly result: false; readonly code: 4000; readonly data: "Error happens something1."; } | { readonly result: false; readonly code: 4000; readonly data: "Error happens something2."; } | { readonly result: false; readonly code: 4000; readonly data: "Error happens something3."; } | { readonly result: false; readonly code: 4000; readonly data: "Error happens something4."; } | { readonly result: false; readonly code: 4000; readonly data: "Error happens something5."; }>>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/many";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/many`;
    }
}